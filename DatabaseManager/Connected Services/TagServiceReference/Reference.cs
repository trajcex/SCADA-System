//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseManager.TagServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TagServiceReference.ITagService")]
    public interface ITagService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/SaveTags", ReplyAction="http://tempuri.org/ITagService/SaveTagsResponse")]
        void SaveTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/SaveTags", ReplyAction="http://tempuri.org/ITagService/SaveTagsResponse")]
        System.Threading.Tasks.Task SaveTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetTags", ReplyAction="http://tempuri.org/ITagService/GetTagsResponse")]
        SharedLibrary.Model.Tag[] GetTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetTags", ReplyAction="http://tempuri.org/ITagService/GetTagsResponse")]
        System.Threading.Tasks.Task<SharedLibrary.Model.Tag[]> GetTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddTag", ReplyAction="http://tempuri.org/ITagService/AddTagResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SharedLibrary.Model.DigitalInputTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SharedLibrary.Model.DigitalOutputTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SharedLibrary.Model.AnalogInputTag))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SharedLibrary.Model.AnalogOutputTag))]
        bool AddTag(SharedLibrary.Model.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/AddTag", ReplyAction="http://tempuri.org/ITagService/AddTagResponse")]
        System.Threading.Tasks.Task<bool> AddTagAsync(SharedLibrary.Model.Tag tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteTag", ReplyAction="http://tempuri.org/ITagService/DeleteTagResponse")]
        bool DeleteTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/DeleteTag", ReplyAction="http://tempuri.org/ITagService/DeleteTagResponse")]
        System.Threading.Tasks.Task<bool> DeleteTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllTagNames", ReplyAction="http://tempuri.org/ITagService/GetAllTagNamesResponse")]
        string GetAllTagNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllTagNames", ReplyAction="http://tempuri.org/ITagService/GetAllTagNamesResponse")]
        System.Threading.Tasks.Task<string> GetAllTagNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetOutputTags", ReplyAction="http://tempuri.org/ITagService/GetOutputTagsResponse")]
        string GetOutputTags();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetOutputTags", ReplyAction="http://tempuri.org/ITagService/GetOutputTagsResponse")]
        System.Threading.Tasks.Task<string> GetOutputTagsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllOutput", ReplyAction="http://tempuri.org/ITagService/GetAllOutputResponse")]
        SharedLibrary.Model.Tag[] GetAllOutput();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllOutput", ReplyAction="http://tempuri.org/ITagService/GetAllOutputResponse")]
        System.Threading.Tasks.Task<SharedLibrary.Model.Tag[]> GetAllOutputAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/ChangeOutputTag", ReplyAction="http://tempuri.org/ITagService/ChangeOutputTagResponse")]
        void ChangeOutputTag(string tagName, int value, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/ChangeOutputTag", ReplyAction="http://tempuri.org/ITagService/ChangeOutputTagResponse")]
        System.Threading.Tasks.Task ChangeOutputTagAsync(string tagName, int value, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/StartTag", ReplyAction="http://tempuri.org/ITagService/StartTagResponse")]
        void StartTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/StartTag", ReplyAction="http://tempuri.org/ITagService/StartTagResponse")]
        System.Threading.Tasks.Task StartTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/StopTag", ReplyAction="http://tempuri.org/ITagService/StopTagResponse")]
        void StopTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/StopTag", ReplyAction="http://tempuri.org/ITagService/StopTagResponse")]
        System.Threading.Tasks.Task StopTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllTagsAndScanStatus", ReplyAction="http://tempuri.org/ITagService/GetAllTagsAndScanStatusResponse")]
        System.Collections.Generic.Dictionary<string, bool> GetAllTagsAndScanStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagService/GetAllTagsAndScanStatus", ReplyAction="http://tempuri.org/ITagService/GetAllTagsAndScanStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> GetAllTagsAndScanStatusAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagServiceChannel : DatabaseManager.TagServiceReference.ITagService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagServiceClient : System.ServiceModel.ClientBase<DatabaseManager.TagServiceReference.ITagService>, DatabaseManager.TagServiceReference.ITagService {
        
        public TagServiceClient() {
        }
        
        public TagServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SaveTags() {
            base.Channel.SaveTags();
        }
        
        public System.Threading.Tasks.Task SaveTagsAsync() {
            return base.Channel.SaveTagsAsync();
        }
        
        public SharedLibrary.Model.Tag[] GetTags() {
            return base.Channel.GetTags();
        }
        
        public System.Threading.Tasks.Task<SharedLibrary.Model.Tag[]> GetTagsAsync() {
            return base.Channel.GetTagsAsync();
        }
        
        public bool AddTag(SharedLibrary.Model.Tag tag) {
            return base.Channel.AddTag(tag);
        }
        
        public System.Threading.Tasks.Task<bool> AddTagAsync(SharedLibrary.Model.Tag tag) {
            return base.Channel.AddTagAsync(tag);
        }
        
        public bool DeleteTag(string tagName) {
            return base.Channel.DeleteTag(tagName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTagAsync(string tagName) {
            return base.Channel.DeleteTagAsync(tagName);
        }
        
        public string GetAllTagNames() {
            return base.Channel.GetAllTagNames();
        }
        
        public System.Threading.Tasks.Task<string> GetAllTagNamesAsync() {
            return base.Channel.GetAllTagNamesAsync();
        }
        
        public string GetOutputTags() {
            return base.Channel.GetOutputTags();
        }
        
        public System.Threading.Tasks.Task<string> GetOutputTagsAsync() {
            return base.Channel.GetOutputTagsAsync();
        }
        
        public SharedLibrary.Model.Tag[] GetAllOutput() {
            return base.Channel.GetAllOutput();
        }
        
        public System.Threading.Tasks.Task<SharedLibrary.Model.Tag[]> GetAllOutputAsync() {
            return base.Channel.GetAllOutputAsync();
        }
        
        public void ChangeOutputTag(string tagName, int value, string type) {
            base.Channel.ChangeOutputTag(tagName, value, type);
        }
        
        public System.Threading.Tasks.Task ChangeOutputTagAsync(string tagName, int value, string type) {
            return base.Channel.ChangeOutputTagAsync(tagName, value, type);
        }
        
        public void StartTag(string tagName) {
            base.Channel.StartTag(tagName);
        }
        
        public System.Threading.Tasks.Task StartTagAsync(string tagName) {
            return base.Channel.StartTagAsync(tagName);
        }
        
        public void StopTag(string tagName) {
            base.Channel.StopTag(tagName);
        }
        
        public System.Threading.Tasks.Task StopTagAsync(string tagName) {
            return base.Channel.StopTagAsync(tagName);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> GetAllTagsAndScanStatus() {
            return base.Channel.GetAllTagsAndScanStatus();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> GetAllTagsAndScanStatusAsync() {
            return base.Channel.GetAllTagsAndScanStatusAsync();
        }
    }
}
