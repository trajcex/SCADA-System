//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ReportServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReportServiceReference.IReportManager")]
    public interface IReportManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetLastValueAi", ReplyAction="http://tempuri.org/IReportManager/GetLastValueAiResponse")]
        string GetLastValueAi();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetLastValueAi", ReplyAction="http://tempuri.org/IReportManager/GetLastValueAiResponse")]
        System.Threading.Tasks.Task<string> GetLastValueAiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetLastValueDi", ReplyAction="http://tempuri.org/IReportManager/GetLastValueDiResponse")]
        string GetLastValueDi();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetLastValueDi", ReplyAction="http://tempuri.org/IReportManager/GetLastValueDiResponse")]
        System.Threading.Tasks.Task<string> GetLastValueDiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetSortedValuesByTagName", ReplyAction="http://tempuri.org/IReportManager/GetSortedValuesByTagNameResponse")]
        string GetSortedValuesByTagName(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetSortedValuesByTagName", ReplyAction="http://tempuri.org/IReportManager/GetSortedValuesByTagNameResponse")]
        System.Threading.Tasks.Task<string> GetSortedValuesByTagNameAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAllTagNames", ReplyAction="http://tempuri.org/IReportManager/GetAllTagNamesResponse")]
        string[] GetAllTagNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAllTagNames", ReplyAction="http://tempuri.org/IReportManager/GetAllTagNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllTagNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetTagValuesInPeriod", ReplyAction="http://tempuri.org/IReportManager/GetTagValuesInPeriodResponse")]
        string GetTagValuesInPeriod(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetTagValuesInPeriod", ReplyAction="http://tempuri.org/IReportManager/GetTagValuesInPeriodResponse")]
        System.Threading.Tasks.Task<string> GetTagValuesInPeriodAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsInPeriodResponse")]
        string GetAlarmsInPeriod(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsInPeriod", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsInPeriodResponse")]
        System.Threading.Tasks.Task<string> GetAlarmsInPeriodAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsByPriorityResponse")]
        string GetAlarmsByPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportManager/GetAlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<string> GetAlarmsByPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAllPriorities", ReplyAction="http://tempuri.org/IReportManager/GetAllPrioritiesResponse")]
        string[] GetAllPriorities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetAllPriorities", ReplyAction="http://tempuri.org/IReportManager/GetAllPrioritiesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllPrioritiesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportManagerChannel : ReportManager.ReportServiceReference.IReportManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportManagerClient : System.ServiceModel.ClientBase<ReportManager.ReportServiceReference.IReportManager>, ReportManager.ReportServiceReference.IReportManager {
        
        public ReportManagerClient() {
        }
        
        public ReportManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetLastValueAi() {
            return base.Channel.GetLastValueAi();
        }
        
        public System.Threading.Tasks.Task<string> GetLastValueAiAsync() {
            return base.Channel.GetLastValueAiAsync();
        }
        
        public string GetLastValueDi() {
            return base.Channel.GetLastValueDi();
        }
        
        public System.Threading.Tasks.Task<string> GetLastValueDiAsync() {
            return base.Channel.GetLastValueDiAsync();
        }
        
        public string GetSortedValuesByTagName(string tagName) {
            return base.Channel.GetSortedValuesByTagName(tagName);
        }
        
        public System.Threading.Tasks.Task<string> GetSortedValuesByTagNameAsync(string tagName) {
            return base.Channel.GetSortedValuesByTagNameAsync(tagName);
        }
        
        public string[] GetAllTagNames() {
            return base.Channel.GetAllTagNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllTagNamesAsync() {
            return base.Channel.GetAllTagNamesAsync();
        }
        
        public string GetTagValuesInPeriod(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetTagValuesInPeriod(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<string> GetTagValuesInPeriodAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetTagValuesInPeriodAsync(startTime, endTime);
        }
        
        public string GetAlarmsInPeriod(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAlarmsInPeriod(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<string> GetAlarmsInPeriodAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAlarmsInPeriodAsync(startTime, endTime);
        }
        
        public string GetAlarmsByPriority(int priority) {
            return base.Channel.GetAlarmsByPriority(priority);
        }
        
        public System.Threading.Tasks.Task<string> GetAlarmsByPriorityAsync(int priority) {
            return base.Channel.GetAlarmsByPriorityAsync(priority);
        }
        
        public string[] GetAllPriorities() {
            return base.Channel.GetAllPriorities();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllPrioritiesAsync() {
            return base.Channel.GetAllPrioritiesAsync();
        }
    }
}
