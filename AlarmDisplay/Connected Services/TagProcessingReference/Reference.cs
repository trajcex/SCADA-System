//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlarmDisplay.TagProcessingReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TagProcessingReference.ITagProcessing")]
    public interface ITagProcessing {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagProcessing/StartTag", ReplyAction="http://tempuri.org/ITagProcessing/StartTagResponse")]
        void StartTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagProcessing/StartTag", ReplyAction="http://tempuri.org/ITagProcessing/StartTagResponse")]
        System.Threading.Tasks.Task StartTagAsync(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagProcessing/StopTag", ReplyAction="http://tempuri.org/ITagProcessing/StopTagResponse")]
        void StopTag(string tagName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITagProcessing/StopTag", ReplyAction="http://tempuri.org/ITagProcessing/StopTagResponse")]
        System.Threading.Tasks.Task StopTagAsync(string tagName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITagProcessingChannel : AlarmDisplay.TagProcessingReference.ITagProcessing, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TagProcessingClient : System.ServiceModel.ClientBase<AlarmDisplay.TagProcessingReference.ITagProcessing>, AlarmDisplay.TagProcessingReference.ITagProcessing {
        
        public TagProcessingClient() {
        }
        
        public TagProcessingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TagProcessingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagProcessingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TagProcessingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartTag(string tagName) {
            base.Channel.StartTag(tagName);
        }
        
        public System.Threading.Tasks.Task StartTagAsync(string tagName) {
            return base.Channel.StartTagAsync(tagName);
        }
        
        public void StopTag(string tagName) {
            base.Channel.StopTag(tagName);
        }
        
        public System.Threading.Tasks.Task StopTagAsync(string tagName) {
            return base.Channel.StopTagAsync(tagName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TagProcessingReference.IMonitoring", CallbackContract=typeof(AlarmDisplay.TagProcessingReference.IMonitoringCallback))]
    public interface IMonitoring {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoring/InitSubTrending")]
        void InitSubTrending();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoring/InitSubTrending")]
        System.Threading.Tasks.Task InitSubTrendingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitoringCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitoring/Message")]
        void Message([System.ServiceModel.MessageParameterAttribute(Name="message")] string message1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitoringChannel : AlarmDisplay.TagProcessingReference.IMonitoring, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitoringClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.TagProcessingReference.IMonitoring>, AlarmDisplay.TagProcessingReference.IMonitoring {
        
        public MonitoringClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MonitoringClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MonitoringClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitoringClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitoringClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void InitSubTrending() {
            base.Channel.InitSubTrending();
        }
        
        public System.Threading.Tasks.Task InitSubTrendingAsync() {
            return base.Channel.InitSubTrendingAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TagProcessingReference.IAlarmMonitoring", CallbackContract=typeof(AlarmDisplay.TagProcessingReference.IAlarmMonitoringCallback))]
    public interface IAlarmMonitoring {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmMonitoring/InitSubAlarm")]
        void InitSubAlarm();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmMonitoring/InitSubAlarm")]
        System.Threading.Tasks.Task InitSubAlarmAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmMonitoringCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmMonitoring/Message")]
        void Message([System.ServiceModel.MessageParameterAttribute(Name="message")] string message1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmMonitoringChannel : AlarmDisplay.TagProcessingReference.IAlarmMonitoring, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmMonitoringClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.TagProcessingReference.IAlarmMonitoring>, AlarmDisplay.TagProcessingReference.IAlarmMonitoring {
        
        public AlarmMonitoringClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AlarmMonitoringClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AlarmMonitoringClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmMonitoringClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmMonitoringClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void InitSubAlarm() {
            base.Channel.InitSubAlarm();
        }
        
        public System.Threading.Tasks.Task InitSubAlarmAsync() {
            return base.Channel.InitSubAlarmAsync();
        }
    }
}
